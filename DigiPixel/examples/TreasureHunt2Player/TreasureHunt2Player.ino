// In this game you need to find as many gold coins as you can before the other player does. The first to get to six coins wins!
// Make sure you plug the i2c cable in before turning on your DigiPixels OR you can have them turned on and each player pressed reset to start the game.
// The game will automatically assign a specific color and start location to each player depending on who turned on / reset their Arduino first.

#include <DigiPixel.h>
#include <Wire.h>
#include <avr/pgmspace.h>

// leave the following line uncommented for use with a Digispark
//DigiPixel digiPixel(3,0,5,2,1);  // LED Latch/Button Shift !load pin, LED/Button clock pin, LED Data Pin, LED Output Enable pin, Buttons data pin)

// leave the following line uncommented for use with an Arduino
DigiPixel digiPixel(5,2,6,4,3);  // LED Latch/Button Shift !load pin, LED/Button clock pin, LED Data Pin, LED Output Enable pin, Buttons data pin)

// Program memory arrays
//long Level2Red[64]PROGMEM={0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000110000000000000000000, 0b00000000000011000000000000000000, 0b00000000000001000000000000000000, 0b00000000000001000000000000000000, 0b00000000010001100000000000000000, 0b00000000010000110000000000000000, 0b00000000110000011000000000100000, 0b00000000100000001100000000100000, 0b00000001100000000100000001100000, 0b00000001000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000010000100100000000, 0b00000000000000000000000100000000, 0b00000000001000000000000100000000, 0b00000000001000000010000100000000, 0b00000000001100000000000100000000, 0b00000000000110000000000000000000, 0b00000000000010000000000000000000, 0b00000000000010000000000001000000, 0b00000000000011000111000001000000, 0b00000000000000000001000001000000, 0b00000000000000000001000001000000, 0b00000000000000010001100000000000, 0b00000000000000010000100000000000, 0b00000000000000010000100000000000, 0b00000000000000010000100000000000, 0b00000000000000010001100000000000, 0b00000000000000010011000000000000, 0b00000000000000000010000000000000, 0b00000000000000000110000000000000, 0b00000000000000001000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000001000000000000000000, 0b00000000000001100000000000000000, 0b00000000000000110000000000000000, 0b00000000000000010000000000000000, 0b00000000000000010000000000000000, 0b00000000000000110000000000000000, 0b00000000000000100000000000000000, 0b00000000000001100000000000000000, 0b00000000000011000000000000000000, 0b00000000000010000000001000000000, 0b00000000000000000000001000000000, 0b00000000000000000000001000000000, 0b00000000000000000000001000000000, 0b00000011000000001000001001000000, 0b00000001100000000000001001000000, 0b00000000110000000000001001000000, 0b00000000011000010010000001000000, 0b00000000001000110000000001000000, 0b00000000001000100000000001000000, 0b00000000000000100000100000000000, 0b00000000000001100000000000000000, 0b00000000000011000000000000000000, 0b00000000000111000000000100000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000};
//long Level2Green[64]PROGMEM={0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11100000000000000000000000001111, 0b11100000000000000000000010001111, 0b11100000000000000000000010001111, 0b11100000000000000000000010001111, 0b11100000000000000000100000001111, 0b11100000000000000000100000001111, 0b11100000000000000000100000001111, 0b11100000000000000000100000001111, 0b11100000000010000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100100000000000000000000001111, 0b11100100100000000000000000001111, 0b11100100000000000000000000001111, 0b11100100000000000000000000001111, 0b11100100000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100010000000000000000000001111, 0b11100010000100000000000000001111, 0b11100010000100000000000000001111, 0b11100010000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000100000000000000001001111, 0b11100000100000000000000000001111, 0b11100100100000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000000000001111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111};
//long Level2Blue[64]PROGMEM={0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000100000000000000000000000000, 0b00000100000000000000000000000000, 0b00000100000000000000000000000000, 0b00000100000000000000000000000000, 0b00000100000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000011000000000000000000000000, 0b00000001000000000000000000000000, 0b00000001000000000000000000000000, 0b00000000100000000111000000000000, 0b00000000100000000001000000000000, 0b00000000000000000001000000000000, 0b00000000000000000001100000000000, 0b00000000000100000000100000000000, 0b00000000100100000000100000000000, 0b00000000000100000000100000000000, 0b00000000000100000001100001000000, 0b00000000000100000011000011000000, 0b00000000000100000010000110000000, 0b00000000000100000110000100000000, 0b00000000000100001000001100000000, 0b00000000001000000000011000000000, 0b00000000011000000000011000000000, 0b00000000010000000000001100000000, 0b00000000000000000000000110000000, 0b00000000000000000000000010000000, 0b00000000000000000000000010000000, 0b00000000000000000000110011000000, 0b00000000000000000000100001000000, 0b00000000000000000001100000000000, 0b00000000000000000001000000000000, 0b00000000000000000011000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000001000000000, 0b00000000000000000000001000000000, 0b00000000000000000000001000000000, 0b00000000000000000000001000000000, 0b00000000000000001000001001000000, 0b00000000000000000000001001000000, 0b00000000000000000000001001000000, 0b00000000000000000010000001000000, 0b00000000000000000000000001000000, 0b00000000000000000000000001000000, 0b00000000000000000000100000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000100000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000};
//long Level2Barriers[64]PROGMEM={0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11100000000110000000000000001111, 0b11100100000011000000000010001111, 0b11100100000001000000000010001111, 0b11100100000001000000000010001111, 0b11100100010001100000100000001111, 0b11100100010000110000100000001111, 0b11100000110000011000100000101111, 0b11100000100000001100100000101111, 0b11100001100010000100000001101111, 0b11100001000000000000000000001111, 0b11100000000000000000000000001111, 0b11100000000000010000100100001111, 0b11100000000000000000000100001111, 0b11100000001000000000000100001111, 0b11100000001000000010000100001111, 0b11100000001100000000000100001111, 0b11100011000110000000000000001111, 0b11100001000010000000000000001111, 0b11100001000010000000000001001111, 0b11100000100011000111000001001111, 0b11100000100000000001000001001111, 0b11100000000000000001000001001111, 0b11100000000000010001100000001111, 0b11100000000100010000100000001111, 0b11100000100100010000100000001111, 0b11100000000100010000100000001111, 0b11100000000100010001100001001111, 0b11100000000100010011000011001111, 0b11100100000100000010000110001111, 0b11100100100100000110000100001111, 0b11100100000100001000001100001111, 0b11100100001000000000011000001111, 0b11100100011000000000011000001111, 0b11100000010000000000001100001111, 0b11100000000001000000000110001111, 0b11100000000001100000000010001111, 0b11100010000000110000000010001111, 0b11100010000100010000110011001111, 0b11100010000100010000100001001111, 0b11100010000000110001100000001111, 0b11100000000000100001000000001111, 0b11100000000001100011000000001111, 0b11100000100011000000000001001111, 0b11100000100010000000001000001111, 0b11100100100000000000001000001111, 0b11100000000000000000001000001111, 0b11100000000000000000001000001111, 0b11100011000000001000001001001111, 0b11100001100000000000001001001111, 0b11100000110000000000001001001111, 0b11100000011000010010000001001111, 0b11100000001000110000000001001111, 0b11100000001000100000000001001111, 0b11100000000000100000100000001111, 0b11100000000001100000000000001111, 0b11100000000011000000000000001111, 0b11100000000111000000000100001111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111};

long Level3Red[64]PROGMEM={0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000001000000, 0b00000000000000000000000001000000, 0b00000000000000000000000001000000, 0b00000000000000000000000011000000, 0b00000000000000000000000010000000, 0b00000000000000000000000110000000, 0b00000000000000000000000100000000, 0b00000000000000000000001100000000, 0b00000000000000000000001000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000001000000, 0b00000000000000000000000010000000, 0b00000000000000000000000100000000, 0b00000000000000000000000100000000, 0b00000000000000000000000100000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000010000000000000000000, 0b00000000000110000000000000000000, 0b00000000000100000000000000000000, 0b00000000001100000000000000000000, 0b00000000001000000000000000000000, 0b00000000001000000000000000000000, 0b00000000001000100000000000000000, 0b00000000001000100000000000000000, 0b00000000001000100000000000000000, 0b00000000001000100000000000000000, 0b00000000001000000000000000000000, 0b00000000001100000000000000000000, 0b00000000000110000000000000000000, 0b00000000000011000000000000000000, 0b00000000000001100000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000};
long Level3Green[64]PROGMEM={0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11100000000001111000000000001111, 0b11100010000000111000000000001111, 0b11100011000000011000000000001111, 0b11100001000000001000000000001111, 0b11100000000000000000000000001111, 0b11101000000000000000000000001111, 0b11101000010000000000000000001111, 0b11101000010000000000000000001111, 0b11101000011000000000000000001111, 0b11101000001100000000000000001111, 0b11101000000110000000000000001111, 0b11101000000010000000000000001111, 0b11100000000010000000000000001111, 0b11100000000110000000000000001111, 0b11100100001100000000000000001111, 0b11100100001000000000000000001111, 0b11100010001100000000000000001111, 0b11100000000100000000000000001111, 0b11100000000110001000000000001111, 0b11100000000010001000000000001111, 0b11100000000000001000000000001111, 0b11100000000000001000000000001111, 0b11100000000000000000100000001111, 0b11100000000000000000000000001111, 0b11100000000000000010000000001111, 0b11100000000000000011000000001111, 0b11100000000000000001100000001111, 0b11100000000000000000100000001111, 0b11100000000000000000000000001111, 0b11100000000000000100001000001111, 0b11100000000000000100001000001111, 0b11100000000000000100001000001111, 0b11100000000000000100001000001111, 0b11100001100000000100000000001111, 0b11100000000000000000000000001111, 0b11100000000000000000100000001111, 0b11100000000000000000100000001111, 0b11100000000000000000100000001111, 0b11100000000000000000100000001111, 0b11100000000000000000100010001111, 0b11100000000000000000000110001111, 0b11100000000000000000000100001111, 0b11100000000000000000000100001111, 0b11100000000000000010000100001111, 0b11100000000000010000000000001111, 0b11100000001000000000000001001111, 0b11100000001100000000000001001111, 0b11100000000100011000000011001111, 0b11100000000100001110000000001111, 0b11100000000100000011000000011111, 0b11100000000110000001000000011111, 0b11100000000010000001100000111111, 0b11100000000010000000100000111111, 0b11100000000010001000100001111111, 0b11100000000010001100000011111111, 0b11100000000010000100000111111111, 0b11100000000010000000011111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111};
long Level3Blue[64]PROGMEM={0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000001111000000000000000, 0b00000000000000111000000000000000, 0b00000000000000011000000000000000, 0b00000000000000001000000000000000, 0b00000000000000000000000000000000, 0b00000000000000001000000000000000, 0b00000000000000001100000000000000, 0b00000000000000000100000000000000, 0b00000000000000000110000000000000, 0b00000000000000000011000000000000, 0b00000000000000000001000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000100000000000000, 0b00000000000000000110000000000000, 0b00000000000000000011000000000000, 0b00000000000000000001000000000000, 0b00000000000000000000000000000000, 0b00000000000000001000010000000000, 0b00000010000000001000011000000000, 0b00000001000000001000001100000000, 0b00000000100000001000000110000000, 0b00000000100000000000100010000000, 0b00000000000100000000000000000000, 0b00000000001000000000000000000000, 0b00000000011000000000000000000000, 0b00000001100000000000000000000000, 0b00000000000000000000000001000000, 0b00000000000000000000000001000000, 0b00000000000000000000000000000000, 0b00000001000000000000000000000000, 0b00000000000000000000000001000000, 0b00000000000000000000000001000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000100000000000000000001000000, 0b00000100000000000000000001000000, 0b00000100000000000000000000000000, 0b00000100000000000000000000000000, 0b00000000000000000000000010000000, 0b00000000000000000000000110000000, 0b00000000000000000000000100000000, 0b00000000000000000000000100000000, 0b00000010000000000010000100000000, 0b00000010000000000000000000000000, 0b00000010000000000000000001000000, 0b00000010000000000000000001000000, 0b00000010000000011000000011000000, 0b00000011000000001110000000000000, 0b00000001000000000011000000010000, 0b00000001100000000001000000010000, 0b00000000100000000001100000110000, 0b00000000000000000000100000110000, 0b00000000000000000000100001110000, 0b00000000000000000000000011110000, 0b00000000000000000000000111110000, 0b00000000000000000000011111110000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000};
long Level3Barriers[64]PROGMEM={0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11100000000001111000000000001111, 0b11100010000000111000000001001111, 0b11100011000000011000000001001111, 0b11100001000000001000000001001111, 0b11100000000000000000000011001111, 0b11101000000000001000000010001111, 0b11101000010000001100000110001111, 0b11101000010000000100000100001111, 0b11101000011000000110001100001111, 0b11101000001100000011001000001111, 0b11101000000110000001000000001111, 0b11101000000010000000000001001111, 0b11100000000010000000000010001111, 0b11100000000110000100000100001111, 0b11100100001100000110000100001111, 0b11100100001000000011000100001111, 0b11100010001100000001000000001111, 0b11100000000100000000000000001111, 0b11100000000110001000010000001111, 0b11100010000010001000011000001111, 0b11100001000000001000001100001111, 0b11100000100000001000000110001111, 0b11100000100000000000100010001111, 0b11100000000100000000000000001111, 0b11100000001000000010000000001111, 0b11100000011000000011000000001111, 0b11100001100000000001100000001111, 0b11100000000010000000100001001111, 0b11100000000110000000000001001111, 0b11100000000100000100001000001111, 0b11100001001100000100001000001111, 0b11100000001000000100001001001111, 0b11100000001000000100001001001111, 0b11100001101000100100000000001111, 0b11100000001000100000000000001111, 0b11100100001000100000100001001111, 0b11100100001000100000100001001111, 0b11100100001000000000100000001111, 0b11100100001100000000100000001111, 0b11100000000110000000100010001111, 0b11100000000011000000000110001111, 0b11100000000001100000000100001111, 0b11100000000000000000000100001111, 0b11100010000000000010000100001111, 0b11100010000000010000000000001111, 0b11100010001000000000000001001111, 0b11100010001100000000000001001111, 0b11100010000100011000000011001111, 0b11100011000100001110000000001111, 0b11100001000100000011000000011111, 0b11100001100110000001000000011111, 0b11100000100010000001100000111111, 0b11100000000010000000100000111111, 0b11100000000010001000100001111111, 0b11100000000010001100000011111111, 0b11100000000010000100000111111111, 0b11100000000010000000011111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111};

byte YouWinGreen[88]PROGMEM={0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b11100001, 0b00100001, 0b00100001, 0b00100001, 0b00100001, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b00100110, 0b00100010, 0b00100010, 0b00011010, 0b00001110, 0b00000000, 0b00001110, 0b00111001, 0b00000001, 0b00000001, 0b00000001, 0b00010001, 0b00011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01111100, 0b00000010, 0b00000010, 0b00000010, 0b00000100, 0b00011100, 0b00000010, 0b00000011, 0b00000001, 0b00000001, 0b01000001, 0b01111111, 0b00000000, 0b00100000, 0b00100000, 0b00100001, 0b00100001, 0b01111110, 0b01000010, 0b01000010, 0b00000010, 0b00000010, 0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b00001000, 0b00000100, 0b00000010, 0b00000001, 0b00000001, 0b00000001, 0b01100001, 0b00011111, 0b00000000, 0b00000000, 0b00000000, 0b01111101, 0b00000000, 0b00000000, 0b00000000, 0b01111101, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000};
byte YouLoseRed[85]PROGMEM={0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b11100001, 0b00100001, 0b00100001, 0b00100001, 0b00100001, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b00100110, 0b00100010, 0b00100010, 0b00011010, 0b00001110, 0b00000000, 0b00001110, 0b00111001, 0b00000001, 0b00000001, 0b00000001, 0b00010001, 0b00011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b00000001, 0b00000001, 0b00000001, 0b00000001, 0b00000000, 0b00011110, 0b00110011, 0b00100001, 0b00010011, 0b00010011, 0b00010010, 0b00011110, 0b00001100, 0b00000000, 0b00000010, 0b00111001, 0b00101001, 0b00101001, 0b00101001, 0b00001111, 0b00000000, 0b00000000, 0b00011100, 0b00110111, 0b00100101, 0b00100101, 0b00100101, 0b00100101, 0b00000001, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000};



// Constants
#define MaxJumpHeight 3
#define PlayingGame 0
#define ShowWinLoseScreen 1

// Variables
byte ScrollingTextDelay = 2;
byte ScrollingTextOffset = 0;
byte PlayerX = 4;
byte PlayerY = 4;
byte PlayerColor = 7;  //white
byte otherPlayerX;
byte otherPlayerY;
byte otherPlayerColor;
byte ScreenXOffset = 0;
byte ScreenYOffset = 25;
byte ButtonDelay = 10;
byte ButtonDelaySave = 7;
long TempLong = 0;
byte address;
byte coinsX[11] = {5,9,15,18,26,28,29,39,46,54,58};
byte coinsY[11] = {10,19,23,17,6,27,16,8,21,8,26};
byte coinsXReceived[11];
byte coinsYReceived[11];
byte gameMode = PlayingGame;
boolean otherPlayerHasWon = false;
boolean iHaveWon = false;
byte locationOfLastCoinGrabbedFromOtherPlayer = 255;  // 255 actually means that they have not grabbed a coin

byte myCoins = 0;
byte opponentCoins = 0;
byte locationOfLastCoinGrabbed = 255;  // we don't have 255 coins, this number just means that we have not grabbed a coin.

byte printDelay = 50;

byte JumpSpeed = 4;
byte JumpHeight = 0;
byte HoverDelay = 0;
boolean IsJumping = false;
boolean IsHovering = false;
boolean IsFalling = true;

// We will run this code just once when power is applied or the Arduino is reset. (we use it to set initial conditions and possibly input / output pins).
void setup(){
  setI2CAddress();
  Wire.onReceive(receiveEvent); // register event
  Serial.begin(9600);
}

// We will run the following code over and over again in a constant loop for as long as power is applied.
void loop(){  
  digiPixel.saveButtonStates();      // This is always required if you want to use the DigiPixel's buttons
  digiPixel.drawScreen();
  MoveGameArea();
  SaveGraphics();
  sendData();
  checkIfGrabbedCoin();
  checkForWinLoseSituation();
}

void checkForWinLoseSituation()
{
  if (myCoins > 5)   // if we have more than half the total coins, then we have won!!!
  {
    gameMode = ShowWinLoseScreen;
    iHaveWon = true;
  }
  if (otherPlayerHasWon == true)
  {
    gameMode = ShowWinLoseScreen;
  }
}

void checkIfGrabbedCoin(){
  for (int index = 0; index < sizeof(coinsX); index++)
  {
    if (ScreenXOffset + 4 == coinsX[index] & ScreenYOffset + 4 == coinsY[index])
   {
     locationOfLastCoinGrabbed = index;
     myCoins++;  // you got a coin!
     coinsX[index] = 255;  // this actually places the coin way out of the screen so we could never see it. I.E. it disappears
     coinsY[index] = 255;
   } 
  }
  
  // now we will see if the other player just grabbed a coin
  if (locationOfLastCoinGrabbedFromOtherPlayer != 255)  // 255 means no coin has been grabbed, anything else will line up with a coin from our coin array (so delete that coin)
  {
    coinsX[locationOfLastCoinGrabbedFromOtherPlayer] = 255;  // this will remove it from the screen
    coinsY[locationOfLastCoinGrabbedFromOtherPlayer] = 255;  // this will remove it from the screen
    locationOfLastCoinGrabbed = 255;  // and now we are back to no coin being grabbed
  }
}

void MoveGameArea(){
     // Then we'll see if the player is jumping, hovering or falling. This first bit is to see if we have pressed the jump button   
  if (digiPixel.buttonAPressed & ScreenYOffset < 24 & digiPixel.checkBarrier(PlayerX, (PlayerY + 1)) == false & IsFalling == false & IsJumping == false & IsHovering == false){
    IsJumping = true; 
    JumpHeight = 0;     
  }
// If we have pressed the jump button, then run this code which will make the player move up  
  if (IsJumping == true){
    if (JumpSpeed != 0){
     JumpSpeed--;
    }
    else{
      if (JumpHeight == MaxJumpHeight | digiPixel.checkBarrier(PlayerX, (PlayerY + 1)) == true){
        IsJumping = false;
        IsHovering = true;
        HoverDelay = 3;
      }
      else{
        JumpSpeed = 4;
        JumpHeight++;
        ScreenYOffset++;
      } 
    }
  }
 // If the player reaches the peak of his jump OR we hit a block above us, then we hover for just a moment... 
  if (IsHovering == true){
    if (JumpSpeed != 0){
     JumpSpeed--;
    }
    else{
      JumpSpeed = 4;
      HoverDelay--;
      if (HoverDelay == 0){
        IsHovering = false;
        IsFalling = true; 
      }
    } 
  }
// Now the last part is if we are falling. We could be falling because we pressed jump OR we could have stepped off a block. Let's first see if we have a floor beneath us...
  if (digiPixel.checkBarrier(PlayerX, (PlayerY - 1)) == true){
     IsFalling = false;  // there is a floor - so let's not fall then!
  }
  else{
    if (IsJumping == false & IsHovering == false){  // if there ISNT a floor, then we had better check that we arent in the middle of a jump
      IsFalling = true;  // if we're not jumping, then we can start falling (because there's no floor)
    }
    if (IsFalling == true){  // if we are falling then lets run some code that will cause the player to drop down a pixel 
      if (JumpSpeed != 0){
        JumpSpeed--;
      }
      else{
        JumpSpeed = 4;
        ScreenYOffset--;
      }
    }
  }
  
  if (ButtonDelay != 0){
    ButtonDelay--;
  }
  else{
//    if (digiPixel.ButtonBPressed & gameMode == ShowWinLoseScreen)  // put some code here to restart the game once someone has won
//    {
//      gameMode = PlayingGame;
//    }
    if (digiPixel.buttonLeftPressed & ScreenXOffset > 0 & digiPixel.checkBarrier((PlayerX - 1), PlayerY) == false){
      ButtonDelay = ButtonDelaySave;
      ScreenXOffset--; 
    }
    if (digiPixel.buttonRightPressed & ScreenXOffset < ((sizeof(Level3Barriers) / 4) - 8) & digiPixel.checkBarrier((PlayerX + 1), PlayerY) == false){ // we need to divide by 4 because the sizeof instruction gives us the size of the array in BYTES, since we are using longwords, we need to divide by 4.
      ButtonDelay = ButtonDelaySave;
      ScreenXOffset++; 
    }
  }
}

void SaveGraphics(){  // we will draw different graphics to the screen depending on what mode we are in.
  if (gameMode == PlayingGame)
  {
    SaveGraphicsPlayingGame();
  }
  else if (gameMode == ShowWinLoseScreen)
  {
    SaveGraphicsWinLoseScreen();
  }
}

void SaveGraphicsPlayingGame()
{  
  for (byte x = 0; x <= 7; x++){
    digiPixel.bufferRed[x] = pgm_read_dword(&Level3Red[x + ScreenXOffset]) >> ScreenYOffset;
    digiPixel.bufferGreen[x] = pgm_read_dword(&Level3Green[x + ScreenXOffset]) >> ScreenYOffset;
    digiPixel.bufferBlue[x] = pgm_read_dword(&Level3Blue[x + ScreenXOffset]) >> ScreenYOffset;
    digiPixel.bufferBarriers[x] = pgm_read_dword(&Level3Barriers[x + ScreenXOffset]) >> ScreenYOffset;
  }
  digiPixel.setPixel(PlayerX, PlayerY, PlayerColor);  // this draws OUR player on the screen
  
   // this next bit deals with drawing the OTHER player on OUR screen. We first need to see if he is in our field of view though. 
  byte otherPlayerXMinusScreenX = otherPlayerX - ScreenXOffset;  // we need to save the location of our opponent relative to our screen area AS A BYTE. if we don't, we could get a negative answer which would also cause the player to show up when he shouldn't be on the screen.
  byte otherPlayerYMinusScreenY = otherPlayerY - ScreenYOffset;  // we need to save the location of our opponent relative to our screen area AS A BYTE. if we don't, we could get a negative answer which would also cause the player to show up when he shouldn't be on the screen.
  if (otherPlayerXMinusScreenX < 8 & otherPlayerYMinusScreenY < 8){  // is he within our 8 pixel x 8 pixel area? 
    digiPixel.setPixel(otherPlayerXMinusScreenX, otherPlayerYMinusScreenY, otherPlayerColor);  // if so, then draw him on our screen!
  }  
  
  // this next bit deals with drawing the coins on the screen 
  byte coinsXMinusScreenX;  // we need to save the location of our opponent relative to our screen area AS A BYTE. if we don't, we could get a negative answer which would also cause the player to show up when he shouldn't be on the screen.
  byte coinsYMinusScreenY;  // we need to save the location of our opponent relative to our screen area AS A BYTE. if we don't, we could get a negative answer which would also cause the player to show up when he shouldn't be on the screen.
  for (int index = 0; index < sizeof(coinsX); index++)
  {
    coinsXMinusScreenX = coinsX[index] - ScreenXOffset;
    coinsYMinusScreenY = coinsY[index] - ScreenYOffset;
    if (coinsXMinusScreenX < 8 & coinsYMinusScreenY < 8)  // is the coin within our 8 pixel x 8 pixel area?
    {   
      digiPixel.setPixel(coinsXMinusScreenX, coinsYMinusScreenY, yellow);  // if so, then draw the coin on our screen!
    }
  }
}

void SaveGraphicsWinLoseScreen()
{
  digiPixel.clearScreen();  // because we're only sending data to the green pixels - we should clear all other pixels
  for (byte x = 0; x <= 7; x++)
  {
    if (iHaveWon == true)
    {
      digiPixel.bufferGreen[x] = pgm_read_dword(&YouWinGreen[x + ScrollingTextOffset]);
    }
    else if (otherPlayerHasWon == true)
    {
      digiPixel.bufferRed[x] = pgm_read_dword(&YouLoseRed[x + ScrollingTextOffset]);
    }
  }
  if (ScrollingTextDelay != 0)
  {
    ScrollingTextDelay--;
  }
  else
  {
    ScrollingTextDelay = 3;
    ScrollingTextOffset++;
    if ((ScrollingTextOffset == sizeof(YouWinGreen) - 8 & iHaveWon == true) | (ScrollingTextOffset == sizeof(YouLoseRed) - 8 & otherPlayerHasWon == true))
    {
      ScrollingTextOffset = 0;
    }
  } 
}



///////////////////////////////////////////////////////
void setI2CAddress(){
  Wire.begin();
  Wire.beginTransmission(0);
  if (Wire.endTransmission() == 0){  // we will get a logic 0 returned to us IF there is something at address 0.
    address = 1;	// if something is there, we will be the slave
    PlayerColor = magenta;  // player is magenta if we are player 1
    ScreenXOffset = 55;
    ScreenYOffset = 14;
  }
  else{
    address = 0;	// if something is not there, we will be the master
    PlayerColor = white;  // player is white if we are player 0
    ScreenXOffset = 0;
    ScreenYOffset = 25;
  }
  Wire.begin(address);	// and now re-initialise the i2c bus with our new address
}

void receiveEvent(int howMany){
  otherPlayerX = Wire.read(); 
  otherPlayerY = Wire.read(); 
  otherPlayerColor = Wire.read();
  locationOfLastCoinGrabbedFromOtherPlayer = Wire.read();
  otherPlayerHasWon = Wire.read();
}

void sendData(){
  Wire.beginTransmission(!address); // transmit to the other device (if we are device 1 then send to device 0 and vice versa)
  Wire.write(ScreenXOffset + 4);   // we need to add four because our player is always four pixels to the right of where the screenoffsetX is
  Wire.write(ScreenYOffset + 4);   // we need to add four because our player is always four pixels up from where the screenoffsetY is
  Wire.write(PlayerColor);  
  Wire.write(locationOfLastCoinGrabbed);
  Wire.write(iHaveWon);  // this will be false if we have not won the game and will turn true if we do win.
  Wire.endTransmission();    // stop transmitting
}




